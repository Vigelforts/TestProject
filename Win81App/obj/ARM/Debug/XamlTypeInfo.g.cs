//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



namespace Paragon.Container
{
    public partial class App : global::Windows.UI.Xaml.Markup.IXamlMetadataProvider
    {
        private global::Paragon.Container.Win81App_XamlTypeInfo.XamlTypeInfoProvider _provider;

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(global::System.Type type)
        {
            if(_provider == null)
            {
                _provider = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByType(type);
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlType(string fullName)
        {
            if(_provider == null)
            {
                _provider = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlTypeInfoProvider();
            }
            return _provider.GetXamlTypeByName(fullName);
        }

        public global::Windows.UI.Xaml.Markup.XmlnsDefinition[] GetXmlnsDefinitions()
        {
            return new global::Windows.UI.Xaml.Markup.XmlnsDefinition[0];
        }
    }
}

namespace Paragon.Container.Win81App_XamlTypeInfo
{
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal partial class XamlTypeInfoProvider
    {
        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByType.TryGetValue(type, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByType(type);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForType(type);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlType GetXamlTypeByName(string typeName)
        {
            if (string.IsNullOrEmpty(typeName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlType xamlType;
            if (_xamlTypeCacheByName.TryGetValue(typeName, out xamlType))
            {
                return xamlType;
            }
            int typeIndex = LookupTypeIndexByName(typeName);
            if(typeIndex != -1)
            {
                xamlType = CreateXamlType(typeIndex);
            }
            var userXamlType = xamlType as global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType;
            if(xamlType == null || (userXamlType != null && userXamlType.IsReturnTypeStub && !userXamlType.IsLocalType))
            {
                global::Windows.UI.Xaml.Markup.IXamlType libXamlType = CheckOtherMetadataProvidersForName(typeName);
                if (libXamlType != null)
                {
                    if(libXamlType.IsConstructible || xamlType == null)
                    {
                        xamlType = libXamlType;
                    }
                }
            }
            if (xamlType != null)
            {
                _xamlTypeCacheByName.Add(xamlType.FullName, xamlType);
                _xamlTypeCacheByType.Add(xamlType.UnderlyingType, xamlType);
            }
            return xamlType;
        }

        public global::Windows.UI.Xaml.Markup.IXamlMember GetMemberByLongName(string longMemberName)
        {
            if (string.IsNullOrEmpty(longMemberName))
            {
                return null;
            }
            global::Windows.UI.Xaml.Markup.IXamlMember xamlMember;
            if (_xamlMembers.TryGetValue(longMemberName, out xamlMember))
            {
                return xamlMember;
            }
            xamlMember = CreateXamlMember(longMemberName);
            if (xamlMember != null)
            {
                _xamlMembers.Add(longMemberName, xamlMember);
            }
            return xamlMember;
        }

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByName = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>
                _xamlTypeCacheByType = new global::System.Collections.Generic.Dictionary<global::System.Type, global::Windows.UI.Xaml.Markup.IXamlType>();

        global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>
                _xamlMembers = new global::System.Collections.Generic.Dictionary<string, global::Windows.UI.Xaml.Markup.IXamlMember>();

        string[] _typeNameTable = null;
        global::System.Type[] _typeTable = null;

        private void InitTypeTables()
        {
            _typeNameTable = new string[55];
            _typeNameTable[0] = "Paragon.Common.UI.WebViewExtensions";
            _typeNameTable[1] = "Object";
            _typeNameTable[2] = "String";
            _typeNameTable[3] = "Windows.UI.Xaml.DependencyObject";
            _typeNameTable[4] = "Paragon.Container.Views.AdditionalArticleFlyout";
            _typeNameTable[5] = "Windows.UI.Xaml.Controls.SettingsFlyout";
            _typeNameTable[6] = "Windows.UI.Xaml.Controls.ContentControl";
            _typeNameTable[7] = "Paragon.Container.Views.ProductDescriptionHtmlConverter";
            _typeNameTable[8] = "Paragon.Container.Views.ListsCountToWightConverter";
            _typeNameTable[9] = "Paragon.Container.Views.BaseIconConverter";
            _typeNameTable[10] = "Paragon.Container.Views.WordItemTemplateSelector";
            _typeNameTable[11] = "Windows.UI.Xaml.Controls.DataTemplateSelector";
            _typeNameTable[12] = "Paragon.Common.UI.ItemClickCommand";
            _typeNameTable[13] = "System.Windows.Input.ICommand";
            _typeNameTable[14] = "Paragon.Container.Views.ViewBase";
            _typeNameTable[15] = "Cirrious.MvvmCross.WindowsStore.Views.MvxStorePage";
            _typeNameTable[16] = "Windows.UI.Xaml.Controls.Page";
            _typeNameTable[17] = "Windows.UI.Xaml.Controls.UserControl";
            _typeNameTable[18] = "Paragon.Container.Core.ViewModels.ViewModelBase";
            _typeNameTable[19] = "Cirrious.MvvmCross.ViewModels.MvxViewModel";
            _typeNameTable[20] = "Cirrious.MvvmCross.ViewModels.MvxNavigatingObject";
            _typeNameTable[21] = "Cirrious.MvvmCross.ViewModels.MvxNotifyPropertyChanged";
            _typeNameTable[22] = "Cirrious.CrossCore.Core.MvxMainThreadDispatchingObject";
            _typeNameTable[23] = "Paragon.Container.Views.NavigationMenuControl";
            _typeNameTable[24] = "Paragon.Container.Views.ArticleView";
            _typeNameTable[25] = "Paragon.Container.Core.ViewModels.ArticleViewModel";
            _typeNameTable[26] = "Windows.UI.Color";
            _typeNameTable[27] = "System.ValueType";
            _typeNameTable[28] = "Byte";
            _typeNameTable[29] = "Paragon.Common.UI.EnterCommand";
            _typeNameTable[30] = "Paragon.Container.Views.SwitchDirection";
            _typeNameTable[31] = "Paragon.Dictionary.Language";
            _typeNameTable[32] = "Paragon.Container.Views.DictionaryView";
            _typeNameTable[33] = "Paragon.Container.Core.ViewModels.DictionaryViewModel";
            _typeNameTable[34] = "Paragon.Container.Views.EnterCodeFlyout";
            _typeNameTable[35] = "Paragon.Container.Views.FavoritesView";
            _typeNameTable[36] = "Paragon.Container.Core.ViewModels.FavoritesViewModel";
            _typeNameTable[37] = "Paragon.Container.Views.HistoryView";
            _typeNameTable[38] = "Paragon.Container.Core.ViewModels.HistoryViewModel";
            _typeNameTable[39] = "Paragon.Container.Views.InformationView";
            _typeNameTable[40] = "Paragon.Container.Core.ViewModels.InformationViewModel";
            _typeNameTable[41] = "WinRTXamlToolkit.Controls.WrapPanel";
            _typeNameTable[42] = "Windows.UI.Xaml.Controls.Panel";
            _typeNameTable[43] = "Windows.UI.Xaml.Controls.Orientation";
            _typeNameTable[44] = "Double";
            _typeNameTable[45] = "Paragon.Container.Views.ProductsCatalogView";
            _typeNameTable[46] = "Paragon.Container.Core.ViewModels.ProductsCatalogViewModel";
            _typeNameTable[47] = "Paragon.Container.Views.SearchResultsView";
            _typeNameTable[48] = "Paragon.Container.Core.ViewModels.SearchResultsViewModel";
            _typeNameTable[49] = "Paragon.Container.Views.ProductsListControl";
            _typeNameTable[50] = "Paragon.Container.Views.SplashScreenView";
            _typeNameTable[51] = "Paragon.Container.Core.ViewModels.SplashScreenViewModel";
            _typeNameTable[52] = "Paragon.Common.UI.BooleanToVisibilityConverter";
            _typeNameTable[53] = "Paragon.Common.UI.BooleanToVisibilityInvertConverter";
            _typeNameTable[54] = "Paragon.Common.UI.BytesToImageSourceConverter";

            _typeTable = new global::System.Type[55];
            _typeTable[0] = typeof(global::Paragon.Common.UI.WebViewExtensions);
            _typeTable[1] = typeof(global::System.Object);
            _typeTable[2] = typeof(global::System.String);
            _typeTable[3] = typeof(global::Windows.UI.Xaml.DependencyObject);
            _typeTable[4] = typeof(global::Paragon.Container.Views.AdditionalArticleFlyout);
            _typeTable[5] = typeof(global::Windows.UI.Xaml.Controls.SettingsFlyout);
            _typeTable[6] = typeof(global::Windows.UI.Xaml.Controls.ContentControl);
            _typeTable[7] = typeof(global::Paragon.Container.Views.ProductDescriptionHtmlConverter);
            _typeTable[8] = typeof(global::Paragon.Container.Views.ListsCountToWightConverter);
            _typeTable[9] = typeof(global::Paragon.Container.Views.BaseIconConverter);
            _typeTable[10] = typeof(global::Paragon.Container.Views.WordItemTemplateSelector);
            _typeTable[11] = typeof(global::Windows.UI.Xaml.Controls.DataTemplateSelector);
            _typeTable[12] = typeof(global::Paragon.Common.UI.ItemClickCommand);
            _typeTable[13] = typeof(global::System.Windows.Input.ICommand);
            _typeTable[14] = typeof(global::Paragon.Container.Views.ViewBase);
            _typeTable[15] = typeof(global::Cirrious.MvvmCross.WindowsStore.Views.MvxStorePage);
            _typeTable[16] = typeof(global::Windows.UI.Xaml.Controls.Page);
            _typeTable[17] = typeof(global::Windows.UI.Xaml.Controls.UserControl);
            _typeTable[18] = typeof(global::Paragon.Container.Core.ViewModels.ViewModelBase);
            _typeTable[19] = typeof(global::Cirrious.MvvmCross.ViewModels.MvxViewModel);
            _typeTable[20] = typeof(global::Cirrious.MvvmCross.ViewModels.MvxNavigatingObject);
            _typeTable[21] = typeof(global::Cirrious.MvvmCross.ViewModels.MvxNotifyPropertyChanged);
            _typeTable[22] = typeof(global::Cirrious.CrossCore.Core.MvxMainThreadDispatchingObject);
            _typeTable[23] = typeof(global::Paragon.Container.Views.NavigationMenuControl);
            _typeTable[24] = typeof(global::Paragon.Container.Views.ArticleView);
            _typeTable[25] = typeof(global::Paragon.Container.Core.ViewModels.ArticleViewModel);
            _typeTable[26] = typeof(global::Windows.UI.Color);
            _typeTable[27] = typeof(global::System.ValueType);
            _typeTable[28] = typeof(global::System.Byte);
            _typeTable[29] = typeof(global::Paragon.Common.UI.EnterCommand);
            _typeTable[30] = typeof(global::Paragon.Container.Views.SwitchDirection);
            _typeTable[31] = typeof(global::Paragon.Dictionary.Language);
            _typeTable[32] = typeof(global::Paragon.Container.Views.DictionaryView);
            _typeTable[33] = typeof(global::Paragon.Container.Core.ViewModels.DictionaryViewModel);
            _typeTable[34] = typeof(global::Paragon.Container.Views.EnterCodeFlyout);
            _typeTable[35] = typeof(global::Paragon.Container.Views.FavoritesView);
            _typeTable[36] = typeof(global::Paragon.Container.Core.ViewModels.FavoritesViewModel);
            _typeTable[37] = typeof(global::Paragon.Container.Views.HistoryView);
            _typeTable[38] = typeof(global::Paragon.Container.Core.ViewModels.HistoryViewModel);
            _typeTable[39] = typeof(global::Paragon.Container.Views.InformationView);
            _typeTable[40] = typeof(global::Paragon.Container.Core.ViewModels.InformationViewModel);
            _typeTable[41] = typeof(global::WinRTXamlToolkit.Controls.WrapPanel);
            _typeTable[42] = typeof(global::Windows.UI.Xaml.Controls.Panel);
            _typeTable[43] = typeof(global::Windows.UI.Xaml.Controls.Orientation);
            _typeTable[44] = typeof(global::System.Double);
            _typeTable[45] = typeof(global::Paragon.Container.Views.ProductsCatalogView);
            _typeTable[46] = typeof(global::Paragon.Container.Core.ViewModels.ProductsCatalogViewModel);
            _typeTable[47] = typeof(global::Paragon.Container.Views.SearchResultsView);
            _typeTable[48] = typeof(global::Paragon.Container.Core.ViewModels.SearchResultsViewModel);
            _typeTable[49] = typeof(global::Paragon.Container.Views.ProductsListControl);
            _typeTable[50] = typeof(global::Paragon.Container.Views.SplashScreenView);
            _typeTable[51] = typeof(global::Paragon.Container.Core.ViewModels.SplashScreenViewModel);
            _typeTable[52] = typeof(global::Paragon.Common.UI.BooleanToVisibilityConverter);
            _typeTable[53] = typeof(global::Paragon.Common.UI.BooleanToVisibilityInvertConverter);
            _typeTable[54] = typeof(global::Paragon.Common.UI.BytesToImageSourceConverter);
        }

        private int LookupTypeIndexByName(string typeName)
        {
            if (_typeNameTable == null)
            {
                InitTypeTables();
            }
            for (int i=0; i<_typeNameTable.Length; i++)
            {
                if(0 == string.CompareOrdinal(_typeNameTable[i], typeName))
                {
                    return i;
                }
            }
            return -1;
        }

        private int LookupTypeIndexByType(global::System.Type type)
        {
            if (_typeTable == null)
            {
                InitTypeTables();
            }
            for(int i=0; i<_typeTable.Length; i++)
            {
                if(type == _typeTable[i])
                {
                    return i;
                }
            }
            return -1;
        }

        private object Activate_0_WebViewExtensions() { return new global::Paragon.Common.UI.WebViewExtensions(); }
        private object Activate_4_AdditionalArticleFlyout() { return new global::Paragon.Container.Views.AdditionalArticleFlyout(); }
        private object Activate_7_ProductDescriptionHtmlConverter() { return new global::Paragon.Container.Views.ProductDescriptionHtmlConverter(); }
        private object Activate_8_ListsCountToWightConverter() { return new global::Paragon.Container.Views.ListsCountToWightConverter(); }
        private object Activate_9_BaseIconConverter() { return new global::Paragon.Container.Views.BaseIconConverter(); }
        private object Activate_10_WordItemTemplateSelector() { return new global::Paragon.Container.Views.WordItemTemplateSelector(); }
        private object Activate_23_NavigationMenuControl() { return new global::Paragon.Container.Views.NavigationMenuControl(); }
        private object Activate_24_ArticleView() { return new global::Paragon.Container.Views.ArticleView(); }
        private object Activate_25_ArticleViewModel() { return new global::Paragon.Container.Core.ViewModels.ArticleViewModel(); }
        private object Activate_30_SwitchDirection() { return new global::Paragon.Container.Views.SwitchDirection(); }
        private object Activate_32_DictionaryView() { return new global::Paragon.Container.Views.DictionaryView(); }
        private object Activate_33_DictionaryViewModel() { return new global::Paragon.Container.Core.ViewModels.DictionaryViewModel(); }
        private object Activate_34_EnterCodeFlyout() { return new global::Paragon.Container.Views.EnterCodeFlyout(); }
        private object Activate_35_FavoritesView() { return new global::Paragon.Container.Views.FavoritesView(); }
        private object Activate_36_FavoritesViewModel() { return new global::Paragon.Container.Core.ViewModels.FavoritesViewModel(); }
        private object Activate_37_HistoryView() { return new global::Paragon.Container.Views.HistoryView(); }
        private object Activate_38_HistoryViewModel() { return new global::Paragon.Container.Core.ViewModels.HistoryViewModel(); }
        private object Activate_39_InformationView() { return new global::Paragon.Container.Views.InformationView(); }
        private object Activate_40_InformationViewModel() { return new global::Paragon.Container.Core.ViewModels.InformationViewModel(); }
        private object Activate_41_WrapPanel() { return new global::WinRTXamlToolkit.Controls.WrapPanel(); }
        private object Activate_45_ProductsCatalogView() { return new global::Paragon.Container.Views.ProductsCatalogView(); }
        private object Activate_46_ProductsCatalogViewModel() { return new global::Paragon.Container.Core.ViewModels.ProductsCatalogViewModel(); }
        private object Activate_47_SearchResultsView() { return new global::Paragon.Container.Views.SearchResultsView(); }
        private object Activate_48_SearchResultsViewModel() { return new global::Paragon.Container.Core.ViewModels.SearchResultsViewModel(); }
        private object Activate_49_ProductsListControl() { return new global::Paragon.Container.Views.ProductsListControl(); }
        private object Activate_50_SplashScreenView() { return new global::Paragon.Container.Views.SplashScreenView(); }
        private object Activate_51_SplashScreenViewModel() { return new global::Paragon.Container.Core.ViewModels.SplashScreenViewModel(); }
        private object Activate_52_BooleanToVisibilityConverter() { return new global::Paragon.Common.UI.BooleanToVisibilityConverter(); }
        private object Activate_53_BooleanToVisibilityInvertConverter() { return new global::Paragon.Common.UI.BooleanToVisibilityInvertConverter(); }
        private object Activate_54_BytesToImageSourceConverter() { return new global::Paragon.Common.UI.BytesToImageSourceConverter(); }

        private global::Windows.UI.Xaml.Markup.IXamlType CreateXamlType(int typeIndex)
        {
            global::Paragon.Container.Win81App_XamlTypeInfo.XamlSystemBaseType xamlType = null;
            global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType userType;
            string typeName = _typeNameTable[typeIndex];
            global::System.Type type = _typeTable[typeIndex];

            switch (typeIndex)
            {

            case 0:   //  Paragon.Common.UI.WebViewExtensions
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_0_WebViewExtensions;
                userType.AddMemberName("HTML");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 1:   //  Object
                xamlType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 2:   //  String
                xamlType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 3:   //  Windows.UI.Xaml.DependencyObject
                xamlType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 4:   //  Paragon.Container.Views.AdditionalArticleFlyout
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.SettingsFlyout"));
                userType.Activator = Activate_4_AdditionalArticleFlyout;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 5:   //  Windows.UI.Xaml.Controls.SettingsFlyout
                xamlType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 6:   //  Windows.UI.Xaml.Controls.ContentControl
                xamlType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 7:   //  Paragon.Container.Views.ProductDescriptionHtmlConverter
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_7_ProductDescriptionHtmlConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 8:   //  Paragon.Container.Views.ListsCountToWightConverter
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_8_ListsCountToWightConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 9:   //  Paragon.Container.Views.BaseIconConverter
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_9_BaseIconConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 10:   //  Paragon.Container.Views.WordItemTemplateSelector
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.DataTemplateSelector"));
                userType.Activator = Activate_10_WordItemTemplateSelector;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 11:   //  Windows.UI.Xaml.Controls.DataTemplateSelector
                xamlType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 12:   //  Paragon.Common.UI.ItemClickCommand
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Command");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 13:   //  System.Windows.Input.ICommand
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, null);
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 14:   //  Paragon.Container.Views.ViewBase
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Cirrious.MvvmCross.WindowsStore.Views.MvxStorePage"));
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 15:   //  Cirrious.MvvmCross.WindowsStore.Views.MvxStorePage
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Page"));
                xamlType = userType;
                break;

            case 16:   //  Windows.UI.Xaml.Controls.Page
                xamlType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 17:   //  Windows.UI.Xaml.Controls.UserControl
                xamlType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 18:   //  Paragon.Container.Core.ViewModels.ViewModelBase
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Cirrious.MvvmCross.ViewModels.MvxViewModel"));
                xamlType = userType;
                break;

            case 19:   //  Cirrious.MvvmCross.ViewModels.MvxViewModel
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Cirrious.MvvmCross.ViewModels.MvxNavigatingObject"));
                xamlType = userType;
                break;

            case 20:   //  Cirrious.MvvmCross.ViewModels.MvxNavigatingObject
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Cirrious.MvvmCross.ViewModels.MvxNotifyPropertyChanged"));
                xamlType = userType;
                break;

            case 21:   //  Cirrious.MvvmCross.ViewModels.MvxNotifyPropertyChanged
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Cirrious.CrossCore.Core.MvxMainThreadDispatchingObject"));
                xamlType = userType;
                break;

            case 22:   //  Cirrious.CrossCore.Core.MvxMainThreadDispatchingObject
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 23:   //  Paragon.Container.Views.NavigationMenuControl
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_23_NavigationMenuControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 24:   //  Paragon.Container.Views.ArticleView
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Views.ViewBase"));
                userType.Activator = Activate_24_ArticleView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 25:   //  Paragon.Container.Core.ViewModels.ArticleViewModel
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Core.ViewModels.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 26:   //  Windows.UI.Color
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.AddMemberName("A");
                userType.AddMemberName("B");
                userType.AddMemberName("G");
                userType.AddMemberName("R");
                xamlType = userType;
                break;

            case 27:   //  System.ValueType
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                xamlType = userType;
                break;

            case 28:   //  Byte
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("System.ValueType"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 29:   //  Paragon.Common.UI.EnterCommand
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.AddMemberName("Command");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 30:   //  Paragon.Container.Views.SwitchDirection
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_30_SwitchDirection;
                userType.AddMemberName("LanguageFrom");
                userType.AddMemberName("LanguageTo");
                userType.AddMemberName("SwitchCommand");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 31:   //  Paragon.Dictionary.Language
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 32:   //  Paragon.Container.Views.DictionaryView
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Views.ViewBase"));
                userType.Activator = Activate_32_DictionaryView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 33:   //  Paragon.Container.Core.ViewModels.DictionaryViewModel
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Core.ViewModels.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 34:   //  Paragon.Container.Views.EnterCodeFlyout
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.SettingsFlyout"));
                userType.Activator = Activate_34_EnterCodeFlyout;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 35:   //  Paragon.Container.Views.FavoritesView
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Views.ViewBase"));
                userType.Activator = Activate_35_FavoritesView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 36:   //  Paragon.Container.Core.ViewModels.FavoritesViewModel
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Core.ViewModels.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 37:   //  Paragon.Container.Views.HistoryView
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Views.ViewBase"));
                userType.Activator = Activate_37_HistoryView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 38:   //  Paragon.Container.Core.ViewModels.HistoryViewModel
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Core.ViewModels.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 39:   //  Paragon.Container.Views.InformationView
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Views.ViewBase"));
                userType.Activator = Activate_39_InformationView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 40:   //  Paragon.Container.Core.ViewModels.InformationViewModel
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Core.ViewModels.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 41:   //  WinRTXamlToolkit.Controls.WrapPanel
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.Panel"));
                userType.Activator = Activate_41_WrapPanel;
                userType.AddMemberName("Orientation");
                userType.AddMemberName("ItemHeight");
                userType.AddMemberName("ItemWidth");
                xamlType = userType;
                break;

            case 42:   //  Windows.UI.Xaml.Controls.Panel
                xamlType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 43:   //  Windows.UI.Xaml.Controls.Orientation
                xamlType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 44:   //  Double
                xamlType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlSystemBaseType(typeName, type);
                break;

            case 45:   //  Paragon.Container.Views.ProductsCatalogView
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Views.ViewBase"));
                userType.Activator = Activate_45_ProductsCatalogView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 46:   //  Paragon.Container.Core.ViewModels.ProductsCatalogViewModel
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Core.ViewModels.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 47:   //  Paragon.Container.Views.SearchResultsView
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Views.ViewBase"));
                userType.Activator = Activate_47_SearchResultsView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 48:   //  Paragon.Container.Core.ViewModels.SearchResultsViewModel
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Core.ViewModels.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 49:   //  Paragon.Container.Views.ProductsListControl
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Windows.UI.Xaml.Controls.UserControl"));
                userType.Activator = Activate_49_ProductsListControl;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 50:   //  Paragon.Container.Views.SplashScreenView
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Views.ViewBase"));
                userType.Activator = Activate_50_SplashScreenView;
                userType.AddMemberName("ViewModel");
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 51:   //  Paragon.Container.Core.ViewModels.SplashScreenViewModel
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Paragon.Container.Core.ViewModels.ViewModelBase"));
                userType.SetIsReturnTypeStub();
                xamlType = userType;
                break;

            case 52:   //  Paragon.Common.UI.BooleanToVisibilityConverter
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_52_BooleanToVisibilityConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 53:   //  Paragon.Common.UI.BooleanToVisibilityInvertConverter
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_53_BooleanToVisibilityInvertConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;

            case 54:   //  Paragon.Common.UI.BytesToImageSourceConverter
                userType = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType(this, typeName, type, GetXamlTypeByName("Object"));
                userType.Activator = Activate_54_BytesToImageSourceConverter;
                userType.SetIsLocalType();
                xamlType = userType;
                break;
            }
            return xamlType;
        }

        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> _otherProviders;
        private global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider> OtherProviders
        {
            get
            {
                if(_otherProviders == null)
                {
                    _otherProviders = new global::System.Collections.Generic.List<global::Windows.UI.Xaml.Markup.IXamlMetadataProvider>();
                    global::Windows.UI.Xaml.Markup.IXamlMetadataProvider provider;
                    provider = new global::WinRTXamlToolkit.WinRTXamlToolkit_XamlTypeInfo.XamlMetaDataProvider() as global::Windows.UI.Xaml.Markup.IXamlMetadataProvider;
                    _otherProviders.Add(provider); 
                }
                return _otherProviders;
            }
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForName(string typeName)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(typeName);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private global::Windows.UI.Xaml.Markup.IXamlType CheckOtherMetadataProvidersForType(global::System.Type type)
        {
            global::Windows.UI.Xaml.Markup.IXamlType xamlType = null;
            global::Windows.UI.Xaml.Markup.IXamlType foundXamlType = null;
            foreach(global::Windows.UI.Xaml.Markup.IXamlMetadataProvider xmp in OtherProviders)
            {
                xamlType = xmp.GetXamlType(type);
                if(xamlType != null)
                {
                    if(xamlType.IsConstructible)    // not Constructible means it might be a Return Type Stub
                    {
                        return xamlType;
                    }
                    foundXamlType = xamlType;
                }
            }
            return foundXamlType;
        }

        private object get_0_WebViewExtensions_HTML(object instance)
        {
            return global::Paragon.Common.UI.WebViewExtensions.GetHTML((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_0_WebViewExtensions_HTML(object instance, object Value)
        {
            global::Paragon.Common.UI.WebViewExtensions.SetHTML((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.String)Value);
        }
        private object get_1_ItemClickCommand_Command(object instance)
        {
            return global::Paragon.Common.UI.ItemClickCommand.GetCommand((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_1_ItemClickCommand_Command(object instance, object Value)
        {
            global::Paragon.Common.UI.ItemClickCommand.SetCommand((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Windows.Input.ICommand)Value);
        }
        private object get_2_ViewBase_ViewModel(object instance)
        {
            var that = (global::Paragon.Container.Views.ViewBase)instance;
            return that.ViewModel;
        }
        private object get_3_ArticleView_ViewModel(object instance)
        {
            var that = (global::Paragon.Container.Views.ArticleView)instance;
            return that.ViewModel;
        }
        private object get_4_Color_A(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.A;
        }
        private void set_4_Color_A(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.A = (global::System.Byte)Value;
        }
        private object get_5_Color_B(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.B;
        }
        private void set_5_Color_B(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.B = (global::System.Byte)Value;
        }
        private object get_6_Color_G(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.G;
        }
        private void set_6_Color_G(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.G = (global::System.Byte)Value;
        }
        private object get_7_Color_R(object instance)
        {
            var that = (global::Windows.UI.Color)instance;
            return that.R;
        }
        private void set_7_Color_R(object instance, object Value)
        {
            var that = (global::Windows.UI.Color)instance;
            that.R = (global::System.Byte)Value;
        }
        private object get_8_EnterCommand_Command(object instance)
        {
            return global::Paragon.Common.UI.EnterCommand.GetCommand((global::Windows.UI.Xaml.DependencyObject)instance);
        }
        private void set_8_EnterCommand_Command(object instance, object Value)
        {
            global::Paragon.Common.UI.EnterCommand.SetCommand((global::Windows.UI.Xaml.DependencyObject)instance, (global::System.Windows.Input.ICommand)Value);
        }
        private object get_9_SwitchDirection_LanguageFrom(object instance)
        {
            var that = (global::Paragon.Container.Views.SwitchDirection)instance;
            return that.LanguageFrom;
        }
        private void set_9_SwitchDirection_LanguageFrom(object instance, object Value)
        {
            var that = (global::Paragon.Container.Views.SwitchDirection)instance;
            that.LanguageFrom = (global::Paragon.Dictionary.Language)Value;
        }
        private object get_10_SwitchDirection_LanguageTo(object instance)
        {
            var that = (global::Paragon.Container.Views.SwitchDirection)instance;
            return that.LanguageTo;
        }
        private void set_10_SwitchDirection_LanguageTo(object instance, object Value)
        {
            var that = (global::Paragon.Container.Views.SwitchDirection)instance;
            that.LanguageTo = (global::Paragon.Dictionary.Language)Value;
        }
        private object get_11_SwitchDirection_SwitchCommand(object instance)
        {
            var that = (global::Paragon.Container.Views.SwitchDirection)instance;
            return that.SwitchCommand;
        }
        private void set_11_SwitchDirection_SwitchCommand(object instance, object Value)
        {
            var that = (global::Paragon.Container.Views.SwitchDirection)instance;
            that.SwitchCommand = (global::System.Windows.Input.ICommand)Value;
        }
        private object get_12_DictionaryView_ViewModel(object instance)
        {
            var that = (global::Paragon.Container.Views.DictionaryView)instance;
            return that.ViewModel;
        }
        private object get_13_FavoritesView_ViewModel(object instance)
        {
            var that = (global::Paragon.Container.Views.FavoritesView)instance;
            return that.ViewModel;
        }
        private object get_14_HistoryView_ViewModel(object instance)
        {
            var that = (global::Paragon.Container.Views.HistoryView)instance;
            return that.ViewModel;
        }
        private object get_15_InformationView_ViewModel(object instance)
        {
            var that = (global::Paragon.Container.Views.InformationView)instance;
            return that.ViewModel;
        }
        private object get_16_WrapPanel_Orientation(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WrapPanel)instance;
            return that.Orientation;
        }
        private void set_16_WrapPanel_Orientation(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WrapPanel)instance;
            that.Orientation = (global::Windows.UI.Xaml.Controls.Orientation)Value;
        }
        private object get_17_WrapPanel_ItemHeight(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WrapPanel)instance;
            return that.ItemHeight;
        }
        private void set_17_WrapPanel_ItemHeight(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WrapPanel)instance;
            that.ItemHeight = (global::System.Double)Value;
        }
        private object get_18_WrapPanel_ItemWidth(object instance)
        {
            var that = (global::WinRTXamlToolkit.Controls.WrapPanel)instance;
            return that.ItemWidth;
        }
        private void set_18_WrapPanel_ItemWidth(object instance, object Value)
        {
            var that = (global::WinRTXamlToolkit.Controls.WrapPanel)instance;
            that.ItemWidth = (global::System.Double)Value;
        }
        private object get_19_ProductsCatalogView_ViewModel(object instance)
        {
            var that = (global::Paragon.Container.Views.ProductsCatalogView)instance;
            return that.ViewModel;
        }
        private object get_20_SearchResultsView_ViewModel(object instance)
        {
            var that = (global::Paragon.Container.Views.SearchResultsView)instance;
            return that.ViewModel;
        }
        private object get_21_SplashScreenView_ViewModel(object instance)
        {
            var that = (global::Paragon.Container.Views.SplashScreenView)instance;
            return that.ViewModel;
        }

        private global::Windows.UI.Xaml.Markup.IXamlMember CreateXamlMember(string longMemberName)
        {
            global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember xamlMember = null;
            global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType userType;

            switch (longMemberName)
            {
            case "Paragon.Common.UI.WebViewExtensions.HTML":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Common.UI.WebViewExtensions");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "HTML", "String");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_0_WebViewExtensions_HTML;
                xamlMember.Setter = set_0_WebViewExtensions_HTML;
                break;
            case "Paragon.Common.UI.ItemClickCommand.Command":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Common.UI.ItemClickCommand");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_1_ItemClickCommand_Command;
                xamlMember.Setter = set_1_ItemClickCommand_Command;
                break;
            case "Paragon.Container.Views.ViewBase.ViewModel":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Container.Views.ViewBase");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "ViewModel", "Paragon.Container.Core.ViewModels.ViewModelBase");
                xamlMember.Getter = get_2_ViewBase_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Paragon.Container.Views.ArticleView.ViewModel":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Container.Views.ArticleView");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "ViewModel", "Paragon.Container.Core.ViewModels.ArticleViewModel");
                xamlMember.Getter = get_3_ArticleView_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Windows.UI.Color.A":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "A", "Byte");
                xamlMember.Getter = get_4_Color_A;
                xamlMember.Setter = set_4_Color_A;
                break;
            case "Windows.UI.Color.B":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "B", "Byte");
                xamlMember.Getter = get_5_Color_B;
                xamlMember.Setter = set_5_Color_B;
                break;
            case "Windows.UI.Color.G":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "G", "Byte");
                xamlMember.Getter = get_6_Color_G;
                xamlMember.Setter = set_6_Color_G;
                break;
            case "Windows.UI.Color.R":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Windows.UI.Color");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "R", "Byte");
                xamlMember.Getter = get_7_Color_R;
                xamlMember.Setter = set_7_Color_R;
                break;
            case "Paragon.Common.UI.EnterCommand.Command":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Common.UI.EnterCommand");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "Command", "System.Windows.Input.ICommand");
                xamlMember.SetTargetTypeName("Windows.UI.Xaml.DependencyObject");
                xamlMember.SetIsAttachable();
                xamlMember.Getter = get_8_EnterCommand_Command;
                xamlMember.Setter = set_8_EnterCommand_Command;
                break;
            case "Paragon.Container.Views.SwitchDirection.LanguageFrom":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Container.Views.SwitchDirection");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "LanguageFrom", "Paragon.Dictionary.Language");
                xamlMember.Getter = get_9_SwitchDirection_LanguageFrom;
                xamlMember.Setter = set_9_SwitchDirection_LanguageFrom;
                break;
            case "Paragon.Container.Views.SwitchDirection.LanguageTo":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Container.Views.SwitchDirection");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "LanguageTo", "Paragon.Dictionary.Language");
                xamlMember.Getter = get_10_SwitchDirection_LanguageTo;
                xamlMember.Setter = set_10_SwitchDirection_LanguageTo;
                break;
            case "Paragon.Container.Views.SwitchDirection.SwitchCommand":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Container.Views.SwitchDirection");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "SwitchCommand", "System.Windows.Input.ICommand");
                xamlMember.Getter = get_11_SwitchDirection_SwitchCommand;
                xamlMember.Setter = set_11_SwitchDirection_SwitchCommand;
                break;
            case "Paragon.Container.Views.DictionaryView.ViewModel":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Container.Views.DictionaryView");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "ViewModel", "Paragon.Container.Core.ViewModels.DictionaryViewModel");
                xamlMember.Getter = get_12_DictionaryView_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Paragon.Container.Views.FavoritesView.ViewModel":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Container.Views.FavoritesView");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "ViewModel", "Paragon.Container.Core.ViewModels.FavoritesViewModel");
                xamlMember.Getter = get_13_FavoritesView_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Paragon.Container.Views.HistoryView.ViewModel":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Container.Views.HistoryView");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "ViewModel", "Paragon.Container.Core.ViewModels.HistoryViewModel");
                xamlMember.Getter = get_14_HistoryView_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Paragon.Container.Views.InformationView.ViewModel":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Container.Views.InformationView");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "ViewModel", "Paragon.Container.Core.ViewModels.InformationViewModel");
                xamlMember.Getter = get_15_InformationView_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "WinRTXamlToolkit.Controls.WrapPanel.Orientation":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WrapPanel");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "Orientation", "Windows.UI.Xaml.Controls.Orientation");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_16_WrapPanel_Orientation;
                xamlMember.Setter = set_16_WrapPanel_Orientation;
                break;
            case "WinRTXamlToolkit.Controls.WrapPanel.ItemHeight":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WrapPanel");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "ItemHeight", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_17_WrapPanel_ItemHeight;
                xamlMember.Setter = set_17_WrapPanel_ItemHeight;
                break;
            case "WinRTXamlToolkit.Controls.WrapPanel.ItemWidth":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("WinRTXamlToolkit.Controls.WrapPanel");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "ItemWidth", "Double");
                xamlMember.SetIsDependencyProperty();
                xamlMember.Getter = get_18_WrapPanel_ItemWidth;
                xamlMember.Setter = set_18_WrapPanel_ItemWidth;
                break;
            case "Paragon.Container.Views.ProductsCatalogView.ViewModel":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Container.Views.ProductsCatalogView");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "ViewModel", "Paragon.Container.Core.ViewModels.ProductsCatalogViewModel");
                xamlMember.Getter = get_19_ProductsCatalogView_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Paragon.Container.Views.SearchResultsView.ViewModel":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Container.Views.SearchResultsView");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "ViewModel", "Paragon.Container.Core.ViewModels.SearchResultsViewModel");
                xamlMember.Getter = get_20_SearchResultsView_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            case "Paragon.Container.Views.SplashScreenView.ViewModel":
                userType = (global::Paragon.Container.Win81App_XamlTypeInfo.XamlUserType)GetXamlTypeByName("Paragon.Container.Views.SplashScreenView");
                xamlMember = new global::Paragon.Container.Win81App_XamlTypeInfo.XamlMember(this, "ViewModel", "Paragon.Container.Core.ViewModels.SplashScreenViewModel");
                xamlMember.Getter = get_21_SplashScreenView_ViewModel;
                xamlMember.SetIsReadOnly();
                break;
            }
            return xamlMember;
        }
    }

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlSystemBaseType : global::Windows.UI.Xaml.Markup.IXamlType
    {
        string _fullName;
        global::System.Type _underlyingType;

        public XamlSystemBaseType(string fullName, global::System.Type underlyingType)
        {
            _fullName = fullName;
            _underlyingType = underlyingType;
        }

        public string FullName { get { return _fullName; } }

        public global::System.Type UnderlyingType
        {
            get
            {
                return _underlyingType;
            }
        }

        virtual public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name) { throw new global::System.NotImplementedException(); }
        virtual public bool IsArray { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsCollection { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsConstructible { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsDictionary { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsMarkupExtension { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsBindable { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsReturnTypeStub { get { throw new global::System.NotImplementedException(); } }
        virtual public bool IsLocalType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType ItemType { get { throw new global::System.NotImplementedException(); } }
        virtual public global::Windows.UI.Xaml.Markup.IXamlType KeyType { get { throw new global::System.NotImplementedException(); } }
        virtual public object ActivateInstance() { throw new global::System.NotImplementedException(); }
        virtual public void AddToMap(object instance, object key, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void AddToVector(object instance, object item)  { throw new global::System.NotImplementedException(); }
        virtual public void RunInitializer()   { throw new global::System.NotImplementedException(); }
        virtual public object CreateFromString(string input)   { throw new global::System.NotImplementedException(); }
    }
    
    internal delegate object Activator();
    internal delegate void AddToCollection(object instance, object item);
    internal delegate void AddToDictionary(object instance, object key, object item);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlUserType : global::Paragon.Container.Win81App_XamlTypeInfo.XamlSystemBaseType
    {
        global::Paragon.Container.Win81App_XamlTypeInfo.XamlTypeInfoProvider _provider;
        global::Windows.UI.Xaml.Markup.IXamlType _baseType;
        bool _isArray;
        bool _isMarkupExtension;
        bool _isBindable;
        bool _isReturnTypeStub;
        bool _isLocalType;

        string _contentPropertyName;
        string _itemTypeName;
        string _keyTypeName;
        global::System.Collections.Generic.Dictionary<string, string> _memberNames;
        global::System.Collections.Generic.Dictionary<string, object> _enumValues;

        public XamlUserType(global::Paragon.Container.Win81App_XamlTypeInfo.XamlTypeInfoProvider provider, string fullName, global::System.Type fullType, global::Windows.UI.Xaml.Markup.IXamlType baseType)
            :base(fullName, fullType)
        {
            _provider = provider;
            _baseType = baseType;
        }

        // --- Interface methods ----

        override public global::Windows.UI.Xaml.Markup.IXamlType BaseType { get { return _baseType; } }
        override public bool IsArray { get { return _isArray; } }
        override public bool IsCollection { get { return (CollectionAdd != null); } }
        override public bool IsConstructible { get { return (Activator != null); } }
        override public bool IsDictionary { get { return (DictionaryAdd != null); } }
        override public bool IsMarkupExtension { get { return _isMarkupExtension; } }
        override public bool IsBindable { get { return _isBindable; } }
        override public bool IsReturnTypeStub { get { return _isReturnTypeStub; } }
        override public bool IsLocalType { get { return _isLocalType; } }

        override public global::Windows.UI.Xaml.Markup.IXamlMember ContentProperty
        {
            get { return _provider.GetMemberByLongName(_contentPropertyName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType ItemType
        {
            get { return _provider.GetXamlTypeByName(_itemTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlType KeyType
        {
            get { return _provider.GetXamlTypeByName(_keyTypeName); }
        }

        override public global::Windows.UI.Xaml.Markup.IXamlMember GetMember(string name)
        {
            if (_memberNames == null)
            {
                return null;
            }
            string longName;
            if (_memberNames.TryGetValue(name, out longName))
            {
                return _provider.GetMemberByLongName(longName);
            }
            return null;
        }

        override public object ActivateInstance()
        {
            return Activator(); 
        }

        override public void AddToMap(object instance, object key, object item) 
        {
            DictionaryAdd(instance, key, item);
        }

        override public void AddToVector(object instance, object item)
        {
            CollectionAdd(instance, item);
        }

        override public void RunInitializer() 
        {
            System.Runtime.CompilerServices.RuntimeHelpers.RunClassConstructor(UnderlyingType.TypeHandle);
        }

        override public object CreateFromString(string input)
        {
            if (_enumValues != null)
            {
                int value = 0;

                string[] valueParts = input.Split(',');

                foreach (string valuePart in valueParts) 
                {
                    object partValue;
                    int enumFieldValue = 0;
                    try
                    {
                        if (_enumValues.TryGetValue(valuePart.Trim(), out partValue))
                        {
                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                        }
                        else
                        {
                            try
                            {
                                enumFieldValue = global::System.Convert.ToInt32(valuePart.Trim());
                            }
                            catch( global::System.FormatException )
                            {
                                foreach( string key in _enumValues.Keys )
                                {
                                    if( string.Compare(valuePart.Trim(), key, global::System.StringComparison.OrdinalIgnoreCase) == 0 )
                                    {
                                        if( _enumValues.TryGetValue(key.Trim(), out partValue) )
                                        {
                                            enumFieldValue = global::System.Convert.ToInt32(partValue);
                                            break;
                                        }
                                    }
                                }
                            }
                        }
                        value |= enumFieldValue; 
                    }
                    catch( global::System.FormatException )
                    {
                        throw new global::System.ArgumentException(input, FullName);
                    }
                }

                return value; 
            }
            throw new global::System.ArgumentException(input, FullName);
        }

        // --- End of Interface methods

        public Activator Activator { get; set; }
        public AddToCollection CollectionAdd { get; set; }
        public AddToDictionary DictionaryAdd { get; set; }

        public void SetContentPropertyName(string contentPropertyName)
        {
            _contentPropertyName = contentPropertyName;
        }

        public void SetIsArray()
        {
            _isArray = true; 
        }

        public void SetIsMarkupExtension()
        {
            _isMarkupExtension = true;
        }

        public void SetIsBindable()
        {
            _isBindable = true;
        }

        public void SetIsReturnTypeStub()
        {
            _isReturnTypeStub = true;
        }

        public void SetIsLocalType()
        {
            _isLocalType = true;
        }

        public void SetItemTypeName(string itemTypeName)
        {
            _itemTypeName = itemTypeName;
        }

        public void SetKeyTypeName(string keyTypeName)
        {
            _keyTypeName = keyTypeName;
        }

        public void AddMemberName(string shortName)
        {
            if(_memberNames == null)
            {
                _memberNames =  new global::System.Collections.Generic.Dictionary<string,string>();
            }
            _memberNames.Add(shortName, FullName + "." + shortName);
        }

        public void AddEnumValue(string name, object value)
        {
            if (_enumValues == null)
            {
                _enumValues = new global::System.Collections.Generic.Dictionary<string, object>();
            }
            _enumValues.Add(name, value);
        }
    }

    internal delegate object Getter(object instance);
    internal delegate void Setter(object instance, object value);

    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Windows.UI.Xaml.Build.Tasks", "4.0.0.0")]    
    [System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class XamlMember : global::Windows.UI.Xaml.Markup.IXamlMember
    {
        global::Paragon.Container.Win81App_XamlTypeInfo.XamlTypeInfoProvider _provider;
        string _name;
        bool _isAttachable;
        bool _isDependencyProperty;
        bool _isReadOnly;

        string _typeName;
        string _targetTypeName;

        public XamlMember(global::Paragon.Container.Win81App_XamlTypeInfo.XamlTypeInfoProvider provider, string name, string typeName)
        {
            _name = name;
            _typeName = typeName;
            _provider = provider;
        }

        public string Name { get { return _name; } }

        public global::Windows.UI.Xaml.Markup.IXamlType Type
        {
            get { return _provider.GetXamlTypeByName(_typeName); }
        }

        public void SetTargetTypeName(string targetTypeName)
        {
            _targetTypeName = targetTypeName;
        }
        public global::Windows.UI.Xaml.Markup.IXamlType TargetType
        {
            get { return _provider.GetXamlTypeByName(_targetTypeName); }
        }

        public void SetIsAttachable() { _isAttachable = true; }
        public bool IsAttachable { get { return _isAttachable; } }

        public void SetIsDependencyProperty() { _isDependencyProperty = true; }
        public bool IsDependencyProperty { get { return _isDependencyProperty; } }

        public void SetIsReadOnly() { _isReadOnly = true; }
        public bool IsReadOnly { get { return _isReadOnly; } }

        public Getter Getter { get; set; }
        public object GetValue(object instance)
        {
            if (Getter != null)
                return Getter(instance);
            else
                throw new global::System.InvalidOperationException("GetValue");
        }

        public Setter Setter { get; set; }
        public void SetValue(object instance, object value)
        {
            if (Setter != null)
                Setter(instance, value);
            else
                throw new global::System.InvalidOperationException("SetValue");
        }
    }
}


